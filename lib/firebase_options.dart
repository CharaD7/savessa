// File generated by FlutterFire CLI.
// Modified to use environment variables for better security.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:savessa/core/config/env_config.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// This implementation loads Firebase configuration from environment variables
/// instead of hardcoded values for better security and flexibility.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  // Environment configuration instance
  static final _env = EnvConfig();
  
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  /// Web Firebase configuration loaded from environment variables
  static FirebaseOptions get web => FirebaseOptions(
    apiKey: _env.firebaseWebApiKey,
    appId: _env.firebaseWebAppId,
    messagingSenderId: _env.firebaseMessagingSenderId,
    projectId: _env.firebaseProjectId,
    authDomain: _env.firebaseWebAuthDomain,
    storageBucket: _env.firebaseStorageBucket,
    measurementId: _env.firebaseWebMeasurementId,
  );

  /// Android Firebase configuration loaded from environment variables
  static FirebaseOptions get android => FirebaseOptions(
    apiKey: _env.firebaseAndroidApiKey,
    appId: _env.firebaseAndroidAppId,
    messagingSenderId: _env.firebaseMessagingSenderId,
    projectId: _env.firebaseProjectId,
    storageBucket: _env.firebaseStorageBucket,
  );

  /// iOS Firebase configuration loaded from environment variables
  static FirebaseOptions get ios => FirebaseOptions(
    apiKey: _env.firebaseIosApiKey,
    appId: _env.firebaseIosAppId,
    messagingSenderId: _env.firebaseMessagingSenderId,
    projectId: _env.firebaseProjectId,
    storageBucket: _env.firebaseStorageBucket,
    iosBundleId: _env.firebaseIosBundleId,
  );

  /// macOS Firebase configuration loaded from environment variables
  static FirebaseOptions get macos => FirebaseOptions(
    apiKey: _env.firebaseMacosApiKey,
    appId: _env.firebaseMacosAppId,
    messagingSenderId: _env.firebaseMessagingSenderId,
    projectId: _env.firebaseProjectId,
    storageBucket: _env.firebaseStorageBucket,
    iosBundleId: _env.firebaseIosBundleId,
  );

  /// Windows Firebase configuration loaded from environment variables
  static FirebaseOptions get windows => FirebaseOptions(
    apiKey: _env.firebaseWindowsApiKey,
    appId: _env.firebaseWindowsAppId,
    messagingSenderId: _env.firebaseMessagingSenderId,
    projectId: _env.firebaseProjectId,
    authDomain: _env.firebaseWindowsAuthDomain,
    storageBucket: _env.firebaseStorageBucket,
    measurementId: _env.firebaseWindowsMeasurementId,
  );
}
